#include <stdio.h>
#include <math.h>
#include <cstdlib>
#include <stdbool.h>

int gcd(int a, int b) {
    if (b == 0)
        return a;
    else
        return gcd(b, a % b);
}
int najwiekszy_dzielnik(int n) {
    int k = 1;
    for (int i = 2; i < n; i++) {
        if (n % i == 0) {
            k = i;
        }
    }
    return k;
}
int power(int base, int exponent) {
    int result = 1;
    for (int i = 0; i < exponent; i++) {
        result *= base;
    }
    return result;
}

int floorRoot(int m, int n) {
    int upperBound = power(m, n/2);
    int lowerBound = 0;
    int result = 0;

    while (lowerBound <= upperBound) {
        int middle = (lowerBound + upperBound) / 2;
        int root = power(middle, m);
        if (root <= n) {
            result = middle;
            lowerBound = middle + 1;
        } else {
            upperBound = middle - 1;
        }
    }

    return result;
}
// funkcja sprawdzająca, czy dwie liczby są względnie pierwsze
int areRelativelyPrime(int a, int b) {
    while (b != 0) {
        int temp = b;
        b = a % b;
        a = temp;
    }
    return a == 1;
}

// funkcja zwracająca sumę liczb mniejszych od n i względnie pierwszych z n
int sumOfRelativelyPrimeNumbers(int n) {
    int sum = 0;
    for (int i = 1; i < n; i++) {
        if (areRelativelyPrime(i, n)) {
            sum += i;
        }
    }
    return sum;
}
int sum_and_return(void) {
    static int sum = 0;
    int input;
    scanf("%d", &input);
    sum += input;
    printf("Aktualna suma: %d\n", sum);
    return input;
}
int ciag(int n) {
    if (n == 0 || n == 1) {
        return 1;
    } else {
        int suma = 0;
        for (int i = 0; i < n; i++) {
            suma += ciag(i);
        }
        return suma;
    }
}
int sum(const int* a, const int* b) {
    return *a + *b;
}
int* allocateInt() {
    int* ptr = (int*) malloc(sizeof(int)); // alokujemy pamięć dla inta
    return ptr; // zwracamy wskaźnik do zaalokowanej zmiennej
}
double* allocate_double() {
    double* ptr = malloc(sizeof(double));
    return ptr;
}
double srednia(int n, const int tab[]) {
    int suma = 0;
    for (int i = 0; i < n; i++) {
        suma += tab[i];
    }
    return (double) suma / n;
}
double sredniaGeometryczna(unsigned int n, const unsigned int tab[]) {
    unsigned long long iloczyn = 1;
    for (unsigned int i = 0; i < n; i++) {
        iloczyn *= tab[i];
    }
    return pow(iloczyn, 1.0 / n);
}
int najwieksza_pierwsza(int n) {
    // utworzenie tablicy pomocniczej
    bool *tab = malloc((n+1) * sizeof(bool));
    if(tab == NULL) {
        printf("Blad alokacji pamieci.\n");
        exit(EXIT_FAILURE);
    }
    // wypelnienie tablicy
    for(int i = 2; i <= n; i++)
        tab[i] = true;
    // wykreslenie wielokrotnosci liczb pierwszych
    for(int i = 2; i <= sqrt(n); i++) {
        if(tab[i]) {
            for(int j = i*i; j <= n; j += i)
                tab[j] = false;
        }
    }
    // znajdowanie najwiekszej liczby pierwszej mniejszej od n
    int result = 0;
    for(int i = 2; i <= n; i++) {
        if(tab[i])
            result = i;
    }
    free(tab);
    return result;
}
void przepisz_tablice(int n, int tab1[], int tab2[]) {
    for (int i = 0; i < n; i++) {
        tab2[i] = tab1[i];
    }
}
void przepisz_tablice_odwrotnie(int n, int tab1[], int tab2[]) {
    for (int i = 0; i < n; i++) {
        tab2[i] = tab1[n-1-i];
    }
}
void sum_arrays(int n, int tab1[], int tab2[], int tab3[]) {
    for (int i = 0; i < n; i++) {
        tab3[i] = tab1[i] + tab2[i];
    }
}
void rotate_arrays(int n, int tab1[], int tab2[], int tab3[]) {
    int temp[n];
    
    // przepisanie zawartości tablicy tab1 do zmiennej tymczasowej temp
    for (int i = 0; i < n; i++) {
        temp[i] = tab1[i];
    }
    
    // przepisanie zawartości tablicy tab2 do tablicy tab1
    for (int i = 0; i < n; i++) {
        tab1[i] = tab2[i];
    }
    
    // przepisanie zawartości zmiennej tymczasowej temp do tablicy tab2
    for (int i = 0; i < n; i++) {
        tab2[i] = temp[i];
    }
    
    // przepisanie zawartości tablicy tab3 do tablicy tab2
    for (int i = 0; i < n; i++) {
        tab2[i] = tab3[i];
    }
}
void copy_arrays(int n, int tab1[], int tab2[], double tab3[]) {
    for (int i = 0; i < n; i++) {
        tab3[i] = tab1[i];
        tab3[n+i] = tab2[i];
    }
}
void interleave_arrays(int n, int tab1[], int tab2[], double tab3[]) {
    for (int i = 0; i < n; i++) {
        tab3[2*i] = tab1[i];
        tab3[2*i+1] = tab2[i];
    }
}
void swap_values(int n, int tab1[], int tab2[], int tab3[]) {
    for (int i = 0; i < n; i++) {
        int max_value = tab1[i];
        if (tab2[i] > max_value) {
            max_value = tab2[i];
        }
        if (tab3[i] > max_value) {
            max_value = tab3[i];
        }
        tab1[i] = max_value;
        
        int second_max_value, min_value;
        if (tab1[i] == max_value) {
            second_max_value = tab2[i] > tab3[i] ? tab2[i] : tab3[i];
            min_value = tab2[i] < tab3[i] ? tab2[i] : tab3[i];
        } else if (tab2[i] == max_value) {
            second_max_value = tab1[i] > tab3[i] ? tab1[i] : tab3[i];
            min_value = tab1[i] < tab3[i] ? tab1[i] : tab3[i];
        } else {
            second_max_value = tab1[i] > tab2[i] ? tab1[i] : tab2[i];
            min_value = tab1[i] < tab2[i] ? tab1[i] : tab2[i];
        }
        tab2[i] = second_max_value;
        tab3[i] = min_value;
    }
}
int max(int n, int tab[]) {
    int i, max_val = tab[0], max_index = 0;
    for (i = 1; i < n; i++) {
        if (tab[i] > max_val) {
            max_val = tab[i];
            max_index = i;
        }
    }
    return max_val;
}

int min(int n, int tab[]) {
    int i, min_val = tab[0], min_index = 0;
    for (i = 1; i < n; i++) {
        if (tab[i] < min_val) {
            min_val = tab[i];
            min_index = i;
        }
    }
    return min_val;
}

int max_index(int n, int tab[]) {
    int i, max_val = tab[0], max_index = 0;
    for (i = 1; i < n; i++) {
        if (tab[i] > max_val) {
            max_val = tab[i];
            max_index = i;
        }
    }
    return max_index;
}

int min_index(int n, int tab[]) {
    int i, min_val = tab[0], min_index = 0;
    for (i = 1; i < n; i++) {
        if (tab[i] < min_val) {
            min_val = tab[i];
            min_index = i;
        }
    }
    return min_index;
}

int max_abs(int n, int tab[]) {
    int i, max_val = abs(tab[0]);
    for (i = 1; i < n; i++) {
        if (abs(tab[i]) > max_val) {
            max_val = abs(tab[i]);
        }
    }
    return max_val;
}

int max_abs_index(int n, int tab[]) {
    int i, max_val = abs(tab[0]), max_index = 0;
    for (i = 1; i < n; i++) {
        if (abs(tab[i]) > max_val) {
            max_val = abs(tab[i]);
            max_index = i;
        }
    }
    return max_index;
}
double iloczyn_skalarny(int n, double tab1[], double tab2[]) {
    double iloczyn = 0.0;
    for (int i = 0; i < n; i++) {
        iloczyn += tab1[i] * tab2[i];
    }
    return iloczyn;
}
// Funkcja odwraca kolejność elementów tablicy tab
void reverse(int n, int tab[]) {
    for (int i = 0; i < n / 2; i++) {
        int temp = tab[i];
        tab[i] = tab[n - i - 1];
        tab[n - i - 1] = temp;
    }
}

// Funkcja przesuwa o jeden w lewo elementy tablicy tab
void shift_left(int n, int tab[]) {
    int temp = tab[0];
    for (int i = 1; i < n; i++) {
        tab[i - 1] = tab[i];
    }
    tab[n - 1] = temp;
}

// Funkcja przesuwa o jeden w prawo elementy tablicy tab
void shift_right(int n, int tab[]) {
    int temp = tab[n - 1];
    for (int i = n - 1; i > 0; i--) {
        tab[i] = tab[i - 1];
    }
    tab[0] = temp;
}

// Funkcja sortuje rosnąco elementy tablicy tab
void sort_asc(int n, int tab[]) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = i + 1; j < n; j++) {
            if (tab[i] > tab[j]) {
                int temp = tab[i];
                tab[i] = tab[j];
                tab[j] = temp;
            }
        }
    }
}

// Funkcja sortuje malejąco elementy tablicy tab
void sort_desc(int n, int tab[]) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = i + 1; j < n; j++) {
            if (tab[i] < tab[j]) {
                int temp = tab[i];
                tab[i] = tab[j];
                tab[j] = temp;
            }
        }
    }
}
int main() {
    //printf("Napis // \\ \\ $& %%\n");

    /*
    int a, b;
    float srednia;
    printf("Podaj pierwsza liczbe: ");
    scanf("%d", &a);
    printf("Podaj druga liczbe: ");
    scanf("%d", &b);
    srednia = (float)(a + b) / 2;
    printf("Srednia arytmetyczna z %d i %d wynosi %.2f\n", a, b, srednia);
    */

    /*
    double x, pierwiastek;
    printf("Podaj nieujemna liczbe wymierna: ");
    scanf("%lf", &x);
    if (x < 0) {
        printf("Nie mozna obliczyc pierwiastka z liczby ujemnej.\n");
        return 1;
    }
    pierwiastek = sqrt(x);
    printf("Pierwiastek z %.2lf wynosi %.2lf.\n", x, pierwiastek);
    */

    /*
    double x;
    printf("Podaj liczbe wymierna: ");
    scanf("%lf", &x);
    printf("Liczba %lf w postaci wykladniczej to %e.\n", x, x);
    */

    /*
    double a, b, abs_a, abs_b;
    printf("Podaj dwie liczby: ");
    scanf("%lf %lf", &a, &b);
    abs_a = fabs(a);
    abs_b = fabs(b);
    if (abs_a > abs_b) {
        printf("Liczba %lf ma większą wartość bezwzględną.\n", a);
    } else if (abs_a < abs_b) {
        printf("Liczba %lf ma większą wartość bezwzględną.\n", b);
    } else {
        printf("Obie liczby mają taką samą wartość bezwzględną.\n");
    }
    */

    /*
    double base, height, side1, side2, side3, s, area;
    printf("Czy chcesz podać długość podstawy i wysokości (wpisz 1) czy długość wszystkich boków (wpisz 2)? ");
    int option;
    scanf("%d", &option);
    if (option == 1) {
        printf("Podaj długość podstawy i wysokości trójkąta: ");
        scanf("%lf %lf", &base, &height);
        area = 0.5 * base * height;
    } else if (option == 2) {
        printf("Podaj długości wszystkich boków trójkąta: ");
        scanf("%lf %lf %lf", &side1, &side2, &side3);
        s = 0.5 * (side1 + side2 + side3);
        area = sqrt(s * (s - side1) * (s - side2) * (s - side3));
    } else {
        printf("Błędna opcja.\n");
        return 1;
    }
    printf("Pole trójkąta wynosi %lf.\n", area);
    */

    /*
    double a1, b1, c1, a2, b2, c2;
    double det, det_x, det_y, x, y;
    printf("Podaj współczynniki układu dwóch równań ax + by = c i dx + ey = f:\n");
    printf("Podaj a, b, c: ");
    scanf("%lf %lf %lf", &a1, &b1, &c1);
    printf("Podaj d, e, f: ");
    scanf("%lf %lf %lf", &a2, &b2, &c2);
    det = a1 * b2 - a2 * b1;
    det_x = c1 * b2 - c2 * b1;
    det_y = a1 * c2 - a2 * c1;
    if (det == 0) {
        if (det_x == 0 && det_y == 0) {
            printf("Układ równań ma nieskończenie wiele rozwiązań.\n");
        } else {
            printf("Układ równań jest sprzeczny.\n");
        }
    } else {
        x = det_x / det;
        y = det_y / det;
        printf("Rozwiązanie układu równań to x = %lf, y = %lf.\n", x, y);
    }
    */

    /*
    double a, b, c, delta, x1, x2;
    printf("Podaj współczynniki równania kwadratowego ax^2 + bx + c = 0:\n");
    printf("Podaj a: ");
    scanf("%lf", &a);
    printf("Podaj b: ");
    scanf("%lf", &b);
    printf("Podaj c: ");
    scanf("%lf", &c);
    delta = b * b - 4 * a * c;
    if (delta < 0) {
        printf("Równanie kwadratowe nie ma rozwiązań rzeczywistych.\n");
    } else if (delta == 0) {
        x1 = -b / (2 * a);
        printf("Równanie kwadratowe ma jedno podwójne rozwiązanie: x = %lf.\n", x1);
    } else {
        x1 = (-b + sqrt(delta)) / (2 * a);
        x2 = (-b - sqrt(delta)) / (2 * a);
        printf("Równanie kwadratowe ma dwa rozwiązania: x1 = %lf, x2 = %lf.\n", x1, x2);
    }
    */

    /*
    char operator;
    double pierwsza, druga, wynik;
    printf("Podaj operator (+, -, *, /): ");
    scanf("%c", &operator);
    printf("Podaj dwie liczby: ");
    scanf("%lf %lf", &pierwsza, &druga);
    switch (operator) {
        case '+':
            wynik = pierwsza + druga;
            break;
        case '-':
            wynik = pierwsza - druga;
            break;
        case '*':
            wynik = pierwsza * druga;
            break;
        case '/':
            if (druga == 0) {
                printf("Nie mozna dzielic przez zero!\n");
                return 1;
            }
            wynik = pierwsza / druga;
            break;
        default:
            printf("Nieprawidlowy operator!\n");
            return 1;
    }
    printf("%.2lf %c %.2lf = %.2lf\n", pierwsza, operator, druga, wynik);
    */

    /*
    int n, m, i;
    printf("Podaj dwie dodatnie liczby calkowite n i m: ");
    scanf("%d %d", &n, &m);
    if (n <= 0 || m <= 0) {
        printf("Liczby musza byc dodatnie!\n");
        return 1;
    }
    for (i = n; i < m; i += n) {
        printf("%d\n", i);
    }
    */

    /*
    int n, m, i;
    printf("Podaj dwie dodatnie liczby calkowite n i m: ");
    scanf("%d %d", &n, &m);
    if (n <= 0 || m <= 0) {
        printf("Liczby musza byc dodatnie!\n");
        return 1;
    }
    for (i = 1; i <= m; i++) {
        printf("%d\n", n * i);
    }
    */

    /*
    int n, m, k, i;
    printf("Podaj trzy dodatnie liczby calkowite n, m i k: ");
    scanf("%d %d %d", &n, &m, &k);
    if (n <= 0 || m <= 0 || k <= 0) {
        printf("Liczby musza byc dodatnie!\n");
        return 1;
    }
    for (i = m + n - (m % n); i < k; i += n) {
        printf("%d\n", i);
    }
    */

    /*
    int n, i, sum = 0;
    printf("Podaj nieujemna liczbe calkowita n: ");
    scanf("%d", &n);
    for (i = 0; i <= n; i++) {
        sum += i * i;
    }
    printf("Suma kwadratow liczb od 0 do %d to %d\n", n, sum);
    */

    /*
    int n, i, produkt;
    printf("Podaj liczbe calkowita n (n > 2): ");
    scanf("%d", &n);
    produkt = 2;
    for (i = 4; i <= n; i += 2) {
        produkt *= i;
    }
    printf("Iloczyn liczb parzystych z zakresu od 2 do %d wynosi: %d\n", n, produkt);
    */

    /*
    int n, m, i, wynik = 1;
    printf("Podaj dwie liczby calkowite n i m (n < m): ");
    scanf("%d %d", &n, &m);
    for (i = n; i <= m; i++) {
        wynik *= i;
    }
    printf("Iloczyn liczb od n do m wynosi: %d\n", wynik);
    */

    /*
    int n, a = 0, b = 1, c;
    printf("Podaj indeks n: ");
    scanf("%d", &n);
    if (n < 0) {
        printf("Indeks n musi byc nieujemny.\n");
        return 1;
    }
    if (n == 0) {
        printf("Element ciagu Fibonacciego o indeksie 0 to 0.\n");
        return 0;
    }
    if (n == 1) {
        printf("Element ciagu Fibonacciego o indeksie 1 to 1.\n");
        return 0;
    }
    for (int i = 2; i <= n; i++) {
        c = a + b;
        a = b;
        b = c;
    }
    printf("Element ciagu Fibonacciego o indeksie %d to %d.\n", n, b);
    */

    /*
    int n, m;
    printf("Podaj dwie liczby calkowite: ");
    scanf("%d %d", &n, &m);
    int result = gcd(n, m); n jest mniejsza od m
    printf("Najwiekszy wspolny dzielnik liczby %d i %d to %d\n", n, m, result);
    */
    
    /*
    int n, i;
    printf("Podaj liczbe n: ");
    scanf("%d", &n);
    for (i = 0; i*i <= n; i++); // pusta pętla
    printf("Wartosc sqrt(n) zaokraglona w dol do liczby calkowitej: %d\n", i-1);
    */

    /*
    int a, b, c, d;
    printf("Podaj liczby a, b, c, d: ");
    scanf("%d %d %d %d", &a, &b, &c, &d);
    // a)
    int x = 0;
    while (fabs(a) * x * x + b * x + c <= d) {
        x++;
    }
    printf("Najmniejsza nieujemna liczba x: %d\n", x);
    // b)
    x = 0;
    while (5 * x * x + a * x + b < c) {
        x++;
    }
    printf("Największa nieujemna liczba x: %d\n", x-1);
    // c)
    x = 0;
    while (5 * x * x + a * x + b <= c) {
        x++;
    }
    printf("Największa nieujemna liczba x: %d\n", x-1);
    */
    
    /*
    int n, i, j, sum = 0;
    printf("Podaj dodatnią liczbę całkowitą n: ");
    scanf("%d", &n);
    for (i = 1; i < n; i++) {
        int count = 0;
        for (j = 2; j <= i; j++) {
            if (gcd(i, j) == 1) {
                count++;
            }
        }
        sum += count;
    }
    printf("Suma liczb mniejszych od %d, względnie pierwszych z n: %d\n", n, sum);
    */
    
    /*
    int n;
    scanf("%d", &n);
    int sum = 0;
    int fact = 1;
    for (int i = 0; i <= n; i++) {
        sum += fact;
        fact *= i+1;
    }
    printf("%d\n", sum);
    */
    
    /*
    int n, a, b, c;
    printf("Podaj liczbe n: ");
    scanf("%d", &n);
    for (a = 1; a < n; a++) {
        for (b = a; b < n; b++) {
            for (c = b; c < n; c++) {
                if (a * a + b * b == c * c) {
                    printf("%d, %d, %d\n", a, b, c);
                }
            }
        }
    }
    */

    /*
    int n;
    printf("Podaj nieujemna liczbe calkowita n wieksza od 2: ");
    scanf("%d", &n);
    int k = najwiekszy_dzielnik(n);
    printf("Najwiekszy dzielnik mniejszy od %d to %d.\n", n, k);
    */
    
    /*
    int m, n;
    printf("Podaj m: ");
    scanf("%d", &m);
    printf("Podaj n: ");
    scanf("%d", &n);
    int result = floorRoot(m, n);
    printf("Wynik: %d\n", result);
    */
    
    /*
    int n;
    printf("Podaj nieujemną liczbę całkowitą n: ");
    scanf("%d", &n);
    printf("Suma liczb mniejszych od n i względnie pierwszych z n wynosi: %d\n", sumOfRelativelyPrimeNumbers(n));
    */
    
    /*
    int n;
    printf("Podaj indeks: ");
    scanf("%d", &n);
    printf("Wartość elementu o indeksie %d to %d.\n", n, ciag(n));
    */
    
    /*
    int n = 5;
    int tab[] = {4, 2, 1, 5, 3};
    
    // Test funkcji reverse
    printf("Tablica przed odwróceniem: ");
    for (int i = 0; i < n; i++) {
        printf("%d ", tab[i]);
    }
    reverse(n, tab);
    printf("\nTablica po odwróceniu: ");
    for (int i = 0; i < n; i++) {
        printf("%d ", tab[i]);
    }
    printf("\n");
    
    // Test funkcji shift_left
    printf("Tablica przed przesunięciem w lewo: ");
    for (int i = 0; i < n; i++) {
        printf("%d ", tab[i]);
    }
    shift_left(n, tab);
    printf("\nTablica po przesunięciu w lewo: ");
    for (int i = 0; i < n; i++) {
        printf("%d ", tab[i]);
    }
    printf("\n");
    
    // Test funkcji shift_right
    printf("Tablica przed przesunięciem w prawo: ");
    for (int i = 0; i < n; i++) {
        printf("%d ", tab[i]);
    }
    shift_right(n, tab);
    */
    
    
    return 0;
}
